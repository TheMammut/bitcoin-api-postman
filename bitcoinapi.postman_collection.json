{
	"info": {
		"_postman_id": "77ebc242-f9dc-487f-8178-ff4cf9583eb1",
		"name": "bitcoin_api",
		"description": "Connecting Postman to your own Bitcoin Full Node and make API calls.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22963073"
	},
	"item": [
		{
			"name": "Blockchain RPCs",
			"item": [
				{
					"name": "getbestblockhash",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getbestblockhash\",\n    \"params\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getbestblockhash\n\n`getbestblockhash`\n\nReturns the hash of the best (tip) block in the most-work fully-validated chain.\n\n## Result\n\n| <br><br>Name<br><br> | <br><br>Type<br><br> | <br><br>Description<br><br> |\n| --- | --- | --- |\n| <br><br>hex<br><br> | <br><br>string<br><br> | <br><br>the block hash, hex-encoded<br><br> |\n\n## Examples\n\n```\nbitcoin-cli getbestblockhash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getbestblockhash\", \"params\": []}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n```"
					},
					"response": []
				},
				{
					"name": "getblock",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getblock\",\n    \"params\": [\n        \"{{blockhash}}\",\n        {{verbosity}}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getblock\n\n`getblock \"blockhash\" ( verbosity )`\n\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block ‘hash’.\n\nIf verbosity is 1, returns an Object with information about block ‘hash’.\n\nIf verbosity is 2, returns an Object with information about block ‘hash’ and information about each transaction.\n\n## Argument #1 - blockhash\n\n**Type:** string, required\n\nThe block hash\n\n## Argument #2 - verbosity\n\n**Type:** numeric, optional, default=1\n\n0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\n\n## Result (for verbosity = 0)\n\n| <br><br>Name<br><br> | <br><br>Type<br><br> | <br><br>Description<br><br> |\n| --- | --- | --- |\n| <br><br>hex<br><br> | <br><br>string<br><br> | <br><br>A string that is serialized, hex-encoded data for block ‘hash’<br><br> |\n\n## Result (for verbosity = 1)\n\n```\n{                                 (json object)\n  \"hash\" : \"hex\",                 (string) the block hash (same as provided)\n  \"confirmations\" : n,            (numeric) The number of confirmations, or -1 if the block is not on the main chain\n  \"size\" : n,                     (numeric) The block size\n  \"strippedsize\" : n,             (numeric) The block size excluding witness data\n  \"weight\" : n,                   (numeric) The block weight as defined in BIP 141\n  \"height\" : n,                   (numeric) The block height or index\n  \"version\" : n,                  (numeric) The block version\n  \"versionHex\" : \"hex\",           (string) The block version formatted in hexadecimal\n  \"merkleroot\" : \"hex\",           (string) The merkle root\n  \"tx\" : [                        (json array) The transaction ids\n    \"hex\",                        (string) The transaction id\n    ...\n  ],\n  \"time\" : xxx,                   (numeric) The block time expressed in UNIX epoch time\n  \"mediantime\" : xxx,             (numeric) The median block time expressed in UNIX epoch time\n  \"nonce\" : n,                    (numeric) The nonce\n  \"bits\" : \"hex\",                 (string) The bits\n  \"difficulty\" : n,               (numeric) The difficulty\n  \"chainwork\" : \"hex\",            (string) Expected number of hashes required to produce the chain up to this block (in hex)\n  \"nTx\" : n,                      (numeric) The number of transactions in the block\n  \"previousblockhash\" : \"hex\",    (string) The hash of the previous block\n  \"nextblockhash\" : \"hex\"         (string) The hash of the next block\n}\n\n```\n\n## Result (for verbosity = 2)\n\n```\n{             (json object)\n  ...,        Same output as verbosity = 1\n  \"tx\" : [    (json array)\n    {         (json object)\n      ...     The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result\n    },\n    ...\n  ]\n}\n\n```\n\n## Examples\n\n```\nbitcoin-cli getblock \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\",\n```"
					},
					"response": []
				},
				{
					"name": "getblockchaininfo",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getblockchaininfo\",\n    \"params\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getblockchaininfo\n\n`getblockchaininfo`\n\nReturns an object containing various state info regarding blockchain processing.\n\n## Result\n\n```\n{                                         (json object)\n  \"chain\" : \"str\",                        (string) current network name (main, test, regtest)\n  \"blocks\" : n,                           (numeric) the height of the most-work fully-validated chain. The genesis block has height 0\n  \"headers\" : n,                          (numeric) the current number of headers we have validated\n  \"bestblockhash\" : \"str\",                (string) the hash of the currently best block\n  \"difficulty\" : n,                       (numeric) the current difficulty\n  \"mediantime\" : n,                       (numeric) median time for the current best block\n  \"verificationprogress\" : n,             (numeric) estimate of verification progress [0..1]\n  \"initialblockdownload\" : true|false,    (boolean) (debug information) estimate of whether this node is in Initial Block Download mode\n  \"chainwork\" : \"hex\",                    (string) total amount of work in active chain, in hexadecimal\n  \"size_on_disk\" : n,                     (numeric) the estimated size of the block and undo files on disk\n  \"pruned\" : true|false,                  (boolean) if the blocks are subject to pruning\n  \"pruneheight\" : n,                      (numeric) lowest-height complete block stored (only present if pruning is enabled)\n  \"automatic_pruning\" : true|false,       (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\n  \"prune_target_size\" : n,                (numeric) the target size used by pruning (only present if automatic pruning is enabled)\n  \"softforks\" : {                         (json object) status of softforks\n    \"xxxx\" : {                            (json object) name of the softfork\n      \"type\" : \"str\",                     (string) one of \"buried\", \"bip9\"\n      \"bip9\" : {                          (json object) status of bip9 softforks (only for \"bip9\" type)\n        \"status\" : \"str\",                 (string) one of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\"\n        \"bit\" : n,                        (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \"started\" status)\n        \"start_time\" : xxx,               (numeric) the minimum median time past of a block at which the bit gains its meaning\n        \"timeout\" : xxx,                  (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\n        \"since\" : n,                      (numeric) height of the first block to which the status applies\n        \"statistics\" : {                  (json object) numeric statistics about BIP9 signalling for a softfork (only for \"started\" status)\n          \"period\" : n,                   (numeric) the length in blocks of the BIP9 signalling period\n          \"threshold\" : n,                (numeric) the number of blocks with the version bit set required to activate the feature\n          \"elapsed\" : n,                  (numeric) the number of blocks elapsed since the beginning of the current period\n          \"count\" : n,                    (numeric) the number of blocks with the version bit set in the current period\n          \"possible\" : true|false         (boolean) returns false if there are not enough blocks left in this period to pass activation threshold\n        }\n      },\n      \"height\" : n,                       (numeric) height of the first block which the rules are or will be enforced (only for \"buried\" type, or \"bip9\" type with \"active\" status)\n      \"active\" : true|false               (boolean) true if the rules are enforced for the mempool and the next block\n    },\n    ...\n  },\n  \"warnings\" : \"str\"                      (string) any network and blockchain warnings\n}\n\n```\n\n## Examples\n\n```\nbitcoin-cli getblockchaininfo\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\"\n```"
					},
					"response": []
				},
				{
					"name": "getblockcount",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getblockcount\",\n    \"params\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getblockcount\n\n`getblockcount`\n\nReturns the height of the most-work fully-validated chain.\n\nThe genesis block has height 0.\n\n## Result\n\n| <br><br>Name<br><br> | <br><br>Type<br><br> | <br><br>Description<br><br> |\n| --- | --- | --- |\n| <br><br>n<br><br> | <br><br>numeric<br><br> | <br><br>The current block count<br><br> |\n\n## Examples\n\n```\nbitcoin-cli getblockcount\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"\n```"
					},
					"response": []
				},
				{
					"name": "getblockfilter",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getblockfilter\",\n    \"params\": [\n        \"{{blockhash}}\",\n        \"basic\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getblockfilter\n\n`getblockfilter \"blockhash\" ( \"filtertype\" )`\n\nRetrieve a BIP 157 content filter for a particular block.\n\n## Argument #1 - blockhash\n\n**Type:** string, required\n\nThe hash of the block\n\n## Argument #2 - filtertype\n\n**Type:** string, optional, default=basic\n\nThe type name of the filter\n\n## Result\n\n```\n{                      (json object)\n  \"filter\" : \"hex\",    (string) the hex-encoded filter data\n  \"header\" : \"hex\"     (string) the hex-encoded filter header}\n\n```\n\n## Examples\n\n``` bash\nbitcoin-cli getblockfilter \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\" \"basic\"\n\n```\n\n``` bash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getblockfilter\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\", \"basic\"]}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n```"
					},
					"response": []
				},
				{
					"name": "getblockhash",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getblockhash\",\n    \"params\": [\n        {{height}}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getblockhash\n\n`getblockhash height`\n\nReturns hash of block in best-block-chain at height provided.\n\n## Argument #1 - height\n\n**Type:** numeric, required\n\nThe height index\n\n## Result\n\n| <br><br>Name<br><br> | <br><br>Type<br><br> | <br><br>Description<br><br> |\n| --- | --- | --- |\n| <br><br>hex<br><br> | <br><br>string<br><br> | <br><br>The block hash<br><br> |\n\n## Examples\n\n```\nbitcoin-cli getblockhash 1000\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\"\n```"
					},
					"response": []
				},
				{
					"name": "getblockheader",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getblockheader\",\n    \"params\": [\n        \"{{blockhash}}\",\n        {{verbose}}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getblockheader\n\n`getblockheader \"blockhash\" ( verbose )`\n\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader ‘hash’.\n\nIf verbose is true, returns an Object with information about blockheader ‘hash’.\n\n## Argument #1 - blockhash\n\n**Type:** string, required\n\nThe block hash\n\n## Argument #2 - verbose\n\n**Type:** boolean, optional, default=true\n\ntrue for a json object, false for the hex-encoded data\n\n## Result (for verbose = true)\n\n```\n{                                 (json object)\n  \"hash\" : \"hex\",                 (string) the block hash (same as provided)\n  \"confirmations\" : n,            (numeric) The number of confirmations, or -1 if the block is not on the main chain\n  \"height\" : n,                   (numeric) The block height or index\n  \"version\" : n,                  (numeric) The block version\n  \"versionHex\" : \"hex\",           (string) The block version formatted in hexadecimal\n  \"merkleroot\" : \"hex\",           (string) The merkle root\n  \"time\" : xxx,                   (numeric) The block time expressed in UNIX epoch time\n  \"mediantime\" : xxx,             (numeric) The median block time expressed in UNIX epoch time\n  \"nonce\" : n,                    (numeric) The nonce\n  \"bits\" : \"hex\",                 (string) The bits\n  \"difficulty\" : n,               (numeric) The difficulty\n  \"chainwork\" : \"hex\",            (string) Expected number of hashes required to produce the current chain\n  \"nTx\" : n,                      (numeric) The number of transactions in the block\n  \"previousblockhash\" : \"hex\",    (string) The hash of the previous block\n  \"nextblockhash\" : \"hex\"         (string) The hash of the next block\n}\n\n```\n\n## Result (for verbose=false)\n\n| <br><br>Name<br><br> | <br><br>Type<br><br> | <br><br>Description<br><br> |\n| --- | --- | --- |\n| <br><br>hex<br><br> | <br><br>string<br><br> | <br><br>A string that is serialized, hex-encoded data for block ‘hash’<br><br> |\n\n## Examples\n\n```\nbitcoin-cli getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\",\n```"
					},
					"response": []
				},
				{
					"name": "getblockstats",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getblockstats\",\n    \"params\": [\n        {{height}},\n        []\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getblockstats[¶](https://developer.bitcoin.org/reference/rpc/getblockstats.html#getblockstats)\n\n`getblockstats hash_or_height ( stats )`\n\nCompute per block statistics for a given window. All amounts are in satoshis.\n\nIt won’t work for some heights with pruning.\n\n## Argument #1 - hash_or_height\n\n**Type:** string or numeric, required\n\nThe block hash or height of the target block\n\n## Argument #2 - stats\n\n**Type:** json array, optional, default=all values\n\nValues to plot (see result below)\n\n```\n[\n  \"height\",     (string) Selected statistic\n  \"time\",       (string) Selected statistic\n  ...\n]\n\n```\n\n## Result\n\n```\n{                              (json object)\n  \"avgfee\" : n,                (numeric) Average fee in the block\n  \"avgfeerate\" : n,            (numeric) Average feerate (in satoshis per virtual byte)\n  \"avgtxsize\" : n,             (numeric) Average transaction size\n  \"blockhash\" : \"hex\",         (string) The block hash (to check for potential reorgs)\n  \"feerate_percentiles\" : [    (json array) Feerates at the 10th, 25th, 50th, 75th, and 90th percentile weight unit (in satoshis per virtual byte)\n    n,                         (numeric) The 10th percentile feerate\n    n,                         (numeric) The 25th percentile feerate\n    n,                         (numeric) The 50th percentile feerate\n    n,                         (numeric) The 75th percentile feerate\n    n                          (numeric) The 90th percentile feerate\n  ],\n  \"height\" : n,                (numeric) The height of the block\n  \"ins\" : n,                   (numeric) The number of inputs (excluding coinbase)\n  \"maxfee\" : n,                (numeric) Maximum fee in the block\n  \"maxfeerate\" : n,            (numeric) Maximum feerate (in satoshis per virtual byte)\n  \"maxtxsize\" : n,             (numeric) Maximum transaction size\n  \"medianfee\" : n,             (numeric) Truncated median fee in the block\n  \"mediantime\" : n,            (numeric) The block median time past\n  \"mediantxsize\" : n,          (numeric) Truncated median transaction size\n  \"minfee\" : n,                (numeric) Minimum fee in the block\n  \"minfeerate\" : n,            (numeric) Minimum feerate (in satoshis per virtual byte)\n  \"mintxsize\" : n,             (numeric) Minimum transaction size\n  \"outs\" : n,                  (numeric) The number of outputs\n  \"subsidy\" : n,               (numeric) The block subsidy\n  \"swtotal_size\" : n,          (numeric) Total size of all segwit transactions\n  \"swtotal_weight\" : n,        (numeric) Total weight of all segwit transactions\n  \"swtxs\" : n,                 (numeric) The number of segwit transactions\n  \"time\" : n,                  (numeric) The block time\n  \"total_out\" : n,             (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\n  \"total_size\" : n,            (numeric) Total size of all non-coinbase transactions\n  \"total_weight\" : n,          (numeric) Total weight of all non-coinbase transactions\n  \"totalfee\" : n,              (numeric) The fee total\n  \"txs\" : n,                   (numeric) The number of transactions (including coinbase)\n  \"utxo_increase\" : n,         (numeric) The increase/decrease in the number of unspent outputs\n  \"utxo_size_inc\" : n          (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\n}\n\n```\n\n## Examples\n\n```\nbitcoin-cli getblockstats '\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"' '[\"minfeerate\",\"avgfeerate\"]'\n\n```\n\n```\nbitcoin-cli getblockstats 1000 '[\"minfeerate\",\"avgfeerate\"]'\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getblockstats\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\", [\"minfeerate\",\"avgfeerate\"]]}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\"\n```"
					},
					"response": []
				},
				{
					"name": "getblockchaintips",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getchaintips\",\n    \"params\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getchaintips\n\n`getchaintips`\n\nReturn information about all known tips in the block tree, including the main chain as well as orphaned branches.\n\n## Result\n\n```\n[                        (json array)\n  {                      (json object)\n    \"height\" : n,        (numeric) height of the chain tip\n    \"hash\" : \"hex\",      (string) block hash of the tip\n    \"branchlen\" : n,     (numeric) zero for main chain, otherwise length of branch connecting the tip to the main chain\n    \"status\" : \"str\"     (string) status of the chain, \"active\" for the main chain\n                         Possible values for status:\n                         1.  \"invalid\"               This branch contains at least one invalid block\n                         2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid\n                         3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated\n                         4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated\n                         5.  \"active\"                This is the tip of the active main chain, which is certainly valid\n  },\n  ...\n]\n\n```\n\n## Examples\n\n```\nbitcoin-cli getchaintips\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \n```"
					},
					"response": []
				},
				{
					"name": "getchaintxstats",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getchaintxstats\",\n    \"params\": [\n        {{nblocks}},\n        \"{{blockhash}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getchaintxstats\n\n`getchaintxstats ( nblocks \"blockhash\" )`\n\nCompute statistics about the total number and rate of transactions in the chain.\n\n## Argument #1 - nblocks\n\n**Type:** numeric, optional, default=one month\n\nSize of the window in number of blocks\n\n## Argument #2 - blockhash\n\n**Type:** string, optional, default=chain tip\n\nThe hash of the block that ends the window.\n\n## Result\n\n```\n{                                       (json object)\n  \"time\" : xxx,                         (numeric) The timestamp for the final block in the window, expressed in UNIX epoch time\n  \"txcount\" : n,                        (numeric) The total number of transactions in the chain up to that point\n  \"window_final_block_hash\" : \"hex\",    (string) The hash of the final block in the window\n  \"window_final_block_height\" : n,      (numeric) The height of the final block in the window.\n  \"window_block_count\" : n,             (numeric) Size of the window in number of blocks\n  \"window_tx_count\" : n,                (numeric) The number of transactions in the window. Only returned if \"window_block_count\" is > 0\n  \"window_interval\" : n,                (numeric) The elapsed time in the window in seconds. Only returned if \"window_block_count\" is > 0\n  \"txrate\" : n                          (numeric) The average rate of transactions per second in the window. Only returned if \"window_interval\" is > 0\n}\n\n```\n\n## Examples\n\n```\nbitcoin-cli getchaintxstats\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getchaintxstats\", \"params\": [2016]}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n```"
					},
					"response": []
				},
				{
					"name": "getdifficulty",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getdifficulty\",\n    \"params\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getdifficulty\n\n`getdifficulty`\n\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\n\n## Result\n\n| <br><br>Name<br><br> | <br><br>Type<br><br> | <br><br>Description<br><br> |\n| --- | --- | --- |\n| <br><br>n<br><br> | <br><br>numeric<br><br> | <br><br>the proof-of-work difficulty as a multiple of the minimum difficulty.<br><br> |\n\n## Examples\n\n```\nbitcoin-cli getdifficulty\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"\n```"
					},
					"response": []
				},
				{
					"name": "getmempoolancestors",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getmempoolancestors\",\n    \"params\": [\n        \"{{txid}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getmempoolinfo\n`getmempoolinfo`\n\nReturns details on the active state of the TX memory pool.\n\n## Result\n```\n{                            (json object)\n  \"loaded\" : true|false,     (boolean) True if the mempool is fully loaded\n  \"size\" : n,                (numeric) Current tx count\n  \"bytes\" : n,               (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\n  \"usage\" : n,               (numeric) Total memory usage for the mempool\n  \"maxmempool\" : n,          (numeric) Maximum memory usage for the mempool\n  \"mempoolminfee\" : n,       (numeric) Minimum fee rate in BTC/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\n  \"minrelaytxfee\" : n,       (numeric) Current minimum relay fee for transactions\n  \"unbroadcastcount\" : n     (numeric) Current number of transactions that haven't passed initial broadcast yet\n}\n```\n## Examples\n```\nbitcoin-cli getmempoolinfo\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getmempoolinfo\", \"params\": []}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n```"
					},
					"response": []
				},
				{
					"name": "getmempooldescendants",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getmempooldescendants\",\n    \"params\": [\n        \"{{txid}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getmempooldescendants\n\n`getmempooldescendants \"txid\" ( verbose )`\n\nIf txid is in the mempool, returns all in-mempool descendants.\n\n## Argument #1 - txid\n\n**Type:** string, required\n\nThe transaction id (must be in mempool)\n\n## Argument #2 - verbose\n\n**Type:** boolean, optional, default=false\n\nTrue for a json object, false for array of transaction ids\n\n## Result (for verbose = false)\n\n```\n[           (json array)\n  \"hex\",    (string) The transaction id of an in-mempool descendant transaction\n  ...\n]\n\n```\n\n## Result (for verbose = true)\n\n```\n{                                         (json object)\n  \"transactionid\" : {                     (json object)\n    \"vsize\" : n,                          (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\n    \"weight\" : n,                         (numeric) transaction weight as defined in BIP 141.\n    \"fee\" : n,                            (numeric) transaction fee in BTC (DEPRECATED)\n    \"modifiedfee\" : n,                    (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\n    \"time\" : xxx,                         (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\n    \"height\" : n,                         (numeric) block height when transaction entered pool\n    \"descendantcount\" : n,                (numeric) number of in-mempool descendant transactions (including this one)\n    \"descendantsize\" : n,                 (numeric) virtual transaction size of in-mempool descendants (including this one)\n    \"descendantfees\" : n,                 (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\n    \"ancestorcount\" : n,                  (numeric) number of in-mempool ancestor transactions (including this one)\n    \"ancestorsize\" : n,                   (numeric) virtual transaction size of in-mempool ancestors (including this one)\n    \"ancestorfees\" : n,                   (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\n    \"wtxid\" : \"hex\",                      (string) hash of serialized transaction, including witness data\n    \"fees\" : {                            (json object)\n      \"base\" : n,                         (numeric) transaction fee in BTC\n      \"modified\" : n,                     (numeric) transaction fee with fee deltas used for mining priority in BTC\n      \"ancestor\" : n,                     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC\n      \"descendant\" : n                    (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC\n    },\n    \"depends\" : [                         (json array) unconfirmed transactions used as inputs for this transaction\n      \"hex\",                              (string) parent transaction id\n      ...\n    ],\n    \"spentby\" : [                         (json array) unconfirmed transactions spending outputs from this transaction\n      \"hex\",                              (string) child transaction id\n      ...\n    ],\n    \"bip125-replaceable\" : true|false,    (boolean) Whether this transaction could be replaced due to BIP125 (replace-by-fee)\n    \"unbroadcast\" : true|false            (boolean) Whether this transaction is currently unbroadcast (initial broadcast not yet acknowledged by any peers)\n  },\n  ...\n}\n\n```\n\n## Examples\n\n```\nbitcoin-cli getmempooldescendants \"mytxid\"\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getme\n```"
					},
					"response": []
				},
				{
					"name": "getmempoolentry",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getmempooldescendants\",\n    \"params\": [\n        \"{{txid}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getmempoolentry\n\n`getmempoolentry \"txid\"`\n\nReturns mempool data for given transaction\n\n## Argument #1 - txid\n\n**Type:** string, required\n\nThe transaction id (must be in mempool)\n\n## Result\n\n```\n{                                       (json object)\n  \"vsize\" : n,                          (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\n  \"weight\" : n,                         (numeric) transaction weight as defined in BIP 141.\n  \"fee\" : n,                            (numeric) transaction fee in BTC (DEPRECATED)\n  \"modifiedfee\" : n,                    (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\n  \"time\" : xxx,                         (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\n  \"height\" : n,                         (numeric) block height when transaction entered pool\n  \"descendantcount\" : n,                (numeric) number of in-mempool descendant transactions (including this one)\n  \"descendantsize\" : n,                 (numeric) virtual transaction size of in-mempool descendants (including this one)\n  \"descendantfees\" : n,                 (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\n  \"ancestorcount\" : n,                  (numeric) number of in-mempool ancestor transactions (including this one)\n  \"ancestorsize\" : n,                   (numeric) virtual transaction size of in-mempool ancestors (including this one)\n  \"ancestorfees\" : n,                   (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\n  \"wtxid\" : \"hex\",                      (string) hash of serialized transaction, including witness data\n  \"fees\" : {                            (json object)\n    \"base\" : n,                         (numeric) transaction fee in BTC\n    \"modified\" : n,                     (numeric) transaction fee with fee deltas used for mining priority in BTC\n    \"ancestor\" : n,                     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC\n    \"descendant\" : n                    (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC\n  },\n  \"depends\" : [                         (json array) unconfirmed transactions used as inputs for this transaction\n    \"hex\",                              (string) parent transaction id\n    ...\n  ],\n  \"spentby\" : [                         (json array) unconfirmed transactions spending outputs from this transaction\n    \"hex\",                              (string) child transaction id\n    ...\n  ],\n  \"bip125-replaceable\" : true|false,    (boolean) Whether this transaction could be replaced due to BIP125 (replace-by-fee)\n  \"unbroadcast\" : true|false            (boolean) Whether this transaction is currently unbroadcast (initial broadcast not yet acknowledged by any peers)\n}\n\n```\n\n## Examples\n\n```\nbitcoin-cli getmempoolentry \"mytxid\"\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getmempoolentry\", \"params\": [\"mytxid\"]}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n```"
					},
					"response": []
				},
				{
					"name": "getmempoolinfo",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getmempoolinfo\",\n    \"params\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getmempoolinfo\n\n`getmempoolinfo`\n\nReturns details on the active state of the TX memory pool.\n\n## Result\n\n```\n{                            (json object)\n  \"loaded\" : true|false,     (boolean) True if the mempool is fully loaded\n  \"size\" : n,                (numeric) Current tx count\n  \"bytes\" : n,               (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\n  \"usage\" : n,               (numeric) Total memory usage for the mempool\n  \"maxmempool\" : n,          (numeric) Maximum memory usage for the mempool\n  \"mempoolminfee\" : n,       (numeric) Minimum fee rate in BTC/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\n  \"minrelaytxfee\" : n,       (numeric) Current minimum relay fee for transactions\n  \"unbroadcastcount\" : n     (numeric) Current number of transactions that haven't passed initial broadcast yet\n}\n\n```\n\n## Examples\n\n```\nbitcoin-cli getmempoolinfo\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getmempoolinfo\n```"
					},
					"response": []
				},
				{
					"name": "getrawmempool",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getrawmempool\",\n    \"params\": [{{verbose}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getrawmempool\n\n`getrawmempool ( verbose mempool_sequence )`\n\nReturns all transaction ids in memory pool as a json array of string transaction ids.\n\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\n\n## Argument #1 - verbose\n\n**Type:** boolean, optional, default=false\n\nTrue for a json object, false for array of transaction ids\n\n## Argument #2 - mempool_sequence\n\n**Type:** boolean, optional, default=false\n\nIf verbose=false, returns a json object with transaction list and mempool sequence number attached.\n\n## Result (for verbose = false)\n\n```\n[           (json array)\n  \"hex\",    (string) The transaction id\n  ...\n]\n\n```\n\n## Result (for verbose = true)\n\n```\n{                                         (json object)\n  \"transactionid\" : {                     (json object)\n    \"vsize\" : n,                          (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\n    \"weight\" : n,                         (numeric) transaction weight as defined in BIP 141.\n    \"fee\" : n,                            (numeric) transaction fee in BTC (DEPRECATED)\n    \"modifiedfee\" : n,                    (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\n    \"time\" : xxx,                         (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\n    \"height\" : n,                         (numeric) block height when transaction entered pool\n    \"descendantcount\" : n,                (numeric) number of in-mempool descendant transactions (including this one)\n    \"descendantsize\" : n,                 (numeric) virtual transaction size of in-mempool descendants (including this one)\n    \"descendantfees\" : n,                 (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\n    \"ancestorcount\" : n,                  (numeric) number of in-mempool ancestor transactions (including this one)\n    \"ancestorsize\" : n,                   (numeric) virtual transaction size of in-mempool ancestors (including this one)\n    \"ancestorfees\" : n,                   (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\n    \"wtxid\" : \"hex\",                      (string) hash of serialized transaction, including witness data\n    \"fees\" : {                            (json object)\n      \"base\" : n,                         (numeric) transaction fee in BTC\n      \"modified\" : n,                     (numeric) transaction fee with fee deltas used for mining priority in BTC\n      \"ancestor\" : n,                     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in BTC\n      \"descendant\" : n                    (numeric) modified fees (see above) of in-mempool descendants (including this one) in BTC\n    },\n    \"depends\" : [                         (json array) unconfirmed transactions used as inputs for this transaction\n      \"hex\",                              (string) parent transaction id\n      ...\n    ],\n    \"spentby\" : [                         (json array) unconfirmed transactions spending outputs from this transaction\n      \"hex\",                              (string) child transaction id\n      ...\n    ],\n    \"bip125-replaceable\" : true|false,    (boolean) Whether this transaction could be replaced due to BIP125 (replace-by-fee)\n    \"unbroadcast\" : true|false            (boolean) Whether this transaction is currently unbroadcast (initial broadcast not yet acknowledged by any peers)\n  },\n  ...\n}\n\n```\n\n## Result (for verbose = false and mempool_sequence = true)\n\n```\n{                            (json object)\n  \"txids\" : [                (json array)\n    \"hex\",                   (string) The transaction id\n    ...\n  ],\n  \"mempool_sequence\" : n     (numeric) The mempool sequence value.\n}\n\n```\n\n## Examples\n\n```\nbitcoin-cli getrawmempool true\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getr\n```"
					},
					"response": []
				},
				{
					"name": "gettxout",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"gettxout\",\n    \"params\": [\n        \"{{txid}}\",\n        {{vout}},\n        {{include_mempool}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# gettxout\n\n`gettxout \"txid\" n ( include_mempool )`\n\nReturns details about an unspent transaction output.\n\n## Argument #1 - txid\n\n**Type:** string, required\n\nThe transaction id\n\n## Argument #2 - n\n\n**Type:** numeric, required\n\nvout number\n\n## Argument #3 - include_mempool\n\n**Type:** boolean, optional, default=true\n\nWhether to include the mempool. Note that an unspent output that is spent in the mempool won’t appear.\n\n## Result\n\n```\n{                             (json object)\n  \"bestblock\" : \"hex\",        (string) The hash of the block at the tip of the chain\n  \"confirmations\" : n,        (numeric) The number of confirmations\n  \"value\" : n,                (numeric) The transaction value in BTC\n  \"scriptPubKey\" : {          (json object)\n    \"asm\" : \"hex\",            (string)\n    \"hex\" : \"hex\",            (string)\n    \"reqSigs\" : n,            (numeric) Number of required signatures\n    \"type\" : \"hex\",           (string) The type, eg pubkeyhash\n    \"addresses\" : [           (json array) array of bitcoin addresses\n      \"str\",                  (string) bitcoin address\n      ...\n    ]\n  },\n  \"coinbase\" : true|false     (boolean) Coinbase or not\n}\n\n```\n\n## Examples\n\nGet unspent transactions:\n\n```\nbitcoin-cli listunspent\n\n```\n\nView the details:\n\n```\nbitcoin-cli gettxout \"txid\" 1\n\n```\n\nAs a JSON-RPC call:\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1]}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n```"
					},
					"response": []
				},
				{
					"name": "gettxoutproof",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"gettxoutproof\",\n    \"params\": [\n        \"{{txid}}\",\n        {{vout}},\n        {{include_mempool}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# gettxoutproof\n\n`gettxoutproof [\"txid\",...] ( \"blockhash\" )`\n\nReturns a hex-encoded proof that “txid” was included in a block.\n\nNOTE: By default this function only works sometimes. This is when there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option or specify the block in which the transaction is included manually (by blockhash).\n\n## Argument #1 - txids\n\n**Type:** json array, required\n\nThe txids to filter\n\n```\n[\n  \"txid\",    (string) A transaction hash\n  ...\n]\n\n```\n\n## Argument #2 - blockhash\n\n**Type:** string, optional\n\nIf specified, looks for txid in the block with this hash\n\n## Result\n\n| <br><br>Name<br><br> | <br><br>Type<br><br> | <br><br>Description<br><br> |\n| --- | --- | --- |\n| <br><br>str<br><br> | <br><br>string<br><br> | <br><br>A string that is a serialized, hex-encoded data for the proof.<br><br> |"
					},
					"response": []
				},
				{
					"name": "gettxoutsetinfo",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"gettxoutsetinfo\",\n    \"params\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# gettxoutsetinfo\n\n`gettxoutsetinfo ( \"hash_type\" )`\n\nReturns statistics about the unspent transaction output set.\n\nNote this call may take some time.\n\n## Argument #1 - hash_type\n\n**Type:** string, optional, default=hash_serialized_2\n\nWhich UTXO set hash should be calculated. Options: ‘hash_serialized_2’ (the legacy algorithm), ‘none’.\n\n## Result\n\n```\n{                                 (json object)\n  \"height\" : n,                   (numeric) The current block height (index)\n  \"bestblock\" : \"hex\",            (string) The hash of the block at the tip of the chain\n  \"transactions\" : n,             (numeric) The number of transactions with unspent outputs\n  \"txouts\" : n,                   (numeric) The number of unspent transaction outputs\n  \"bogosize\" : n,                 (numeric) A meaningless metric for UTXO set size\n  \"hash_serialized_2\" : \"hex\",    (string) The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\n  \"disk_size\" : n,                (numeric) The estimated size of the chainstate on disk\n  \"total_amount\" : n              (numeric) The total amount\n}\n\n```\n\n## Examples\n\n```\nbitcoin-cli gettxoutsetinfo\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"gettxoutsetinfo\n```"
					},
					"response": []
				}
			]
		},
		{
			"name": "Control RPCs",
			"item": [
				{
					"name": "getmemoryinfo",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getmemoryinfo\",\n    \"params\": [\"stats\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getmemoryinfo\n\n`getmemoryinfo ( \"mode\" )`\n\nReturns an object containing information about memory usage.\n\n## Argument #1 - mode\n\n**Type:** string, optional, default=”stats”\n\ndetermines what kind of information is returned.\n\n- “stats” returns general statistics about memory usage in the daemon.\n- “mallocinfo” returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).\n    \n\n## Result (mode “stats”)\n\n```\n{                         (json object)\n  \"locked\" : {            (json object) Information about locked memory manager\n    \"used\" : n,           (numeric) Number of bytes used\n    \"free\" : n,           (numeric) Number of bytes available in current arenas\n    \"total\" : n,          (numeric) Total number of bytes managed\n    \"locked\" : n,         (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\n    \"chunks_used\" : n,    (numeric) Number allocated chunks\n    \"chunks_free\" : n     (numeric) Number unused chunks\n  }\n}\n\n```\n\n## Result (mode “mallocinfo”)\n\n| <br><br>Name<br><br> | <br><br>Type<br><br> | <br><br>Description<br><br> |\n| --- | --- | --- |\n| <br><br>str<br><br> | <br><br>string<br><br> | <br><br>“…”<br><br> |\n\n## Examples\n\n```\nbitcoin-cli getmemoryinfo\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getmemoryinfo\", \"params\": []}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n```"
					},
					"response": []
				},
				{
					"name": "getrpcinfo",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"getrpcinfo\",\n    \"params\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# getrpcinfo\n\n`getrpcinfo`\n\nReturns details of the RPC server.\n\n## Result\n\n```\n{                          (json object)\n  \"active_commands\" : [    (json array) All active commands\n    {                      (json object) Information about an active command\n      \"method\" : \"str\",    (string) The name of the RPC command\n      \"duration\" : n       (numeric) The running time in microseconds\n    },\n    ...\n  ],\n  \"logpath\" : \"str\"        (string) The complete file path to the debug log\n}\n\n```\n\n## Examples\n\n```\nbitcoin-cli getrpcinfo\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getrpcinfo\", \"params\": []}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n```"
					},
					"response": []
				},
				{
					"name": "help",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"help\",\n    \"params\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# help\n\n`help ( \"command\" )`\n\nList all commands, or get help for a specified command.\n\n## Argument #1 - command\n\n**Type:** string, optional, default=all commands\n\nThe command to get help on\n\n## Result\n\n| <br><br>Name<br><br> | <br><br>Type<br><br> | <br><br>Description<br><br> |\n| --- | --- | --- |\n| <br><br>str<br><br> | <br><br>string<br><br> | <br><br>The help text<br><br> |"
					},
					"response": []
				},
				{
					"name": "logging",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"help\",\n    \"params\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# logging\n\n`logging ( [\"include_category\",...] [\"exclude_category\",...] )`\n\nGets and sets the logging configuration.\n\nWhen called without an argument, returns the list of categories with status that are currently being debug logged or not.\n\nWhen called with arguments, adds or removes categories from debug logging and return the lists above.\n\nThe arguments are evaluated in order “include”, “exclude”.\n\nIf an item is both included and excluded, it will thus end up being excluded.\n\nThe valid logging categories are: net, tor, mempool, http, bench, zmq, walletdb, rpc, estimatefee, addrman, selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej, libevent, coindb, qt, leveldb, validation In addition, the following are available as category names with special meanings:\n\n> - “all”, “1” : represent all logging categories.\n> - “none”, “0” : even if other logging categories are specified, ignore all of them.\n\n## Argument #1 - include\n\n**Type:** json array, optional\n\nThe categories to add to debug logging\n\n```\n[\n  \"include_category\",    (string) the valid logging category\n  ...\n]\n\n```\n\n## Argument #2 - exclude\n\n**Type:** json array, optional\n\nThe categories to remove from debug logging\n\n```\n[\n  \"exclude_category\",    (string) the valid logging category\n  ...\n]\n\n```\n\n## Result\n\n```\n{                             (json object) keys are the logging categories, and values indicates its status\n  \"category\" : true|false,    (boolean) if being debug logged or not. false:inactive, true:active\n  ...\n}\n\n```\n\n## Examples\n\n```\nbitcoin-cli logging \"[\\\"all\\\"]\" \"[\\\"http\\\"]\"\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"logging\", \"params\": [[\"all\"], [\"libevent\"]]}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n\n```"
					},
					"response": []
				},
				{
					"name": "uptime",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"uptime\",\n    \"params\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}:{{port}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}"
						},
						"description": "# uptime\n\n`uptime`\n\nReturns the total uptime of the server.\n\n## Result\n\n| <br><br>Name<br><br> | <br><br>Type<br><br> | <br><br>Description<br><br> |\n| --- | --- | --- |\n| <br><br>n<br><br> | <br><br>numeric<br><br> | <br><br>The number of seconds that the server has been running<br><br> |\n\n## Examples[¶](https://developer.bitcoin.org/reference/rpc/uptime.html#examples)\n\n```\nbitcoin-cli uptime\n\n```\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"uptime\", \"params\": []}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n```"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "",
				"type": "string"
			},
			{
				"key": "username",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}